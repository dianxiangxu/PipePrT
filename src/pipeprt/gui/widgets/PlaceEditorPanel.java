package pipeprt.gui.widgets;

import java.awt.Color;
import java.util.LinkedList;

import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.event.ChangeListener;

import pipeprt.dataLayer.DataLayerInterface;
import pipeprt.dataLayer.ObjectDeepCopier;
import pipeprt.dataLayer.PipeMarking;
import pipeprt.dataLayer.PipePlace;
import pipeprt.gui.CreateGui;
import pipeprt.gui.GuiView;
import pipeprtlocales.PipePrTLocales;

/**
 *
 * @author  pere
 */
public class PlaceEditorPanel 
        extends javax.swing.JPanel {
   
   /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
PipePlace place;
   Boolean attributesVisible;
   Integer capacity;
   Integer marking;
   String name;
   DataLayerInterface pnmlData;
   GuiView view;
   JRootPane rootPane;
   
   
   /**
    * Creates new form PlaceEditor
    */
   public PlaceEditorPanel(JRootPane _rootPane, PipePlace _place, 
           DataLayerInterface _pnmlData, GuiView _view) {
      place = _place;
      pnmlData = _pnmlData;
      view = _view;
      attributesVisible = place.getAttributesVisible();
      capacity = place.getCapacity();
      name = place.getName();
      rootPane = _rootPane;
      initComponents();
      rootPane.setDefaultButton(okButton);

   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
	   java.awt.GridBagConstraints gridBagConstraints;
		
      placeEditorPanel = new javax.swing.JPanel();
      nameLabel = new javax.swing.JLabel();
      nameTextField = new javax.swing.JTextField();
      
      tokensLabel = new javax.swing.JLabel();
      tokensTextArea = new javax.swing.JTextArea(8, 60);
      
      String activeTokenClassID = CreateGui.getModel().getActiveTokenClassID();
      int pos = CreateGui.getModel().getPosInList(activeTokenClassID, place.getCurrentMarking());
      if (pos >= 0) {
    	  tokensTextArea.setText(place.getCurrentMarking().get(pos).getCurrentMarking());
      }

      attributesCheckBox = new javax.swing.JCheckBox();

      buttonPanel = new javax.swing.JPanel();
      okButton = new javax.swing.JButton();
      cancelButton = new javax.swing.JButton();

      setLayout(new java.awt.GridBagLayout());

      placeEditorPanel.setLayout(new java.awt.GridBagLayout());

      placeEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(PipePrTLocales.bundleString("Edit Place")));
//      placeEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit place "+place.getId()));
      nameLabel.setText(PipePrTLocales.bundleString("Name")+":");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(nameLabel, gridBagConstraints);

      nameTextField.setText(place.getName());
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(nameTextField, gridBagConstraints);

      tokensLabel.setText(PipePrTLocales.bundleString("Tokens")+":");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(tokensLabel, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(new JScrollPane(tokensTextArea), gridBagConstraints);
      
      attributesCheckBox.setSelected(place.getAttributesVisible());
      attributesCheckBox.setText(PipePrTLocales.bundleString("Show place attributes"));
      attributesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      attributesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(attributesCheckBox, gridBagConstraints);


      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
      add(placeEditorPanel, gridBagConstraints);

      buttonPanel.setLayout(new java.awt.GridBagLayout());

      okButton.setText(PipePrTLocales.bundleString("OK"));
      okButton.setMaximumSize(new java.awt.Dimension(75, 25));
      okButton.setMinimumSize(new java.awt.Dimension(75, 25));
      okButton.setPreferredSize(new java.awt.Dimension(75, 25));
      okButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            okButtonHandler(evt);
         }
      });
      okButton.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            okButtonKeyPressed(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 9);
      buttonPanel.add(okButton, gridBagConstraints);

      cancelButton.setText(PipePrTLocales.bundleString("Cancel"));
      cancelButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonHandler(evt);
         }
      });

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(8, 0, 8, 10);
      buttonPanel.add(cancelButton, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      add(buttonPanel, gridBagConstraints);

   }// </editor-fold>//GEN-END:initComponents

   
   ChangeListener changeListener = new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
         JSpinner spinner = (JSpinner)evt.getSource();
         JSpinner.NumberEditor numberEditor =
                 ((JSpinner.NumberEditor)spinner.getEditor());
         numberEditor.getTextField().setBackground(new Color(255,255,255));
         spinner.removeChangeListener(this);
      }
   };   
   
   private void okButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okButtonKeyPressed
      if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
         doOK();
      }
   }//GEN-LAST:event_okButtonKeyPressed

   private void doOK(){

      view.getUndoManager().newEdit(); // new "transaction""
		LinkedList<PipeMarking> newMarkings;
		newMarkings = (LinkedList<PipeMarking>) ObjectDeepCopier.mediumCopy(place
				.getCurrentMarking());

		String activeTokenClassID = CreateGui.getModel().getActiveTokenClassID();
		int pos = CreateGui.getModel().getPosInList(activeTokenClassID, newMarkings);
		PipeMarking m;
		if (pos >= 0) {
			m = newMarkings.get(pos);
		} else {
			m = new PipeMarking(CreateGui.getModel().getActiveTokenClass(), "");
			newMarkings.add(m);
		}
		String currentMarking = m.getCurrentMarking();
		String newMarking = tokensTextArea.getText();
		if (newMarking != currentMarking) {
			m.setCurrentMarking(newMarking);
			CreateGui.getView().getUndoManager().addEdit(place.setCurrentMarking(newMarkings));
		}
      
      String newName = nameTextField.getText();
      if (!newName.equals(name)){
         if (pnmlData.checkPlaceIDAvailability(newName)){
            view.getUndoManager().addEdit(place.setPNObjectName(newName));
         } else{
            // aquest nom no està disponible...
            JOptionPane.showMessageDialog(null,
                    PipePrTLocales.bundleString("Duplicate name")+": "+ newName+".", PipePrTLocales.bundleString("Error"),
                                JOptionPane.WARNING_MESSAGE);
            return;
         }
      }
      
//      if (attributesVisible != attributesCheckBox.isSelected()){
//         place.toggleAttributesVisible();
         place.setAttributesVisible(attributesCheckBox.isSelected());
         place.update();
//      }    
      place.repaint();
      exit();
   }
   
   
   private void okButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonHandler
      doOK();
   }//GEN-LAST:event_okButtonHandler

   
   private void exit() {
      rootPane.getParent().setVisible(false);
   }
   
   
   private void cancelButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonHandler
      exit();
   }//GEN-LAST:event_cancelButtonHandler

   
   private javax.swing.JCheckBox attributesCheckBox;
   private javax.swing.JPanel buttonPanel;
   private javax.swing.JButton cancelButton;

   private javax.swing.JLabel nameLabel;
   private javax.swing.JTextField nameTextField;
   private javax.swing.JButton okButton;
   private javax.swing.JPanel placeEditorPanel;

   private javax.swing.JLabel tokensLabel;
   private javax.swing.JTextArea tokensTextArea;

}
